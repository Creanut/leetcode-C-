/*
报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：

1.     1
2.     11
3.     21
4.     1211
5.     111221
1 被读作  "one 1"  ("一个一") , 即 11。
11 被读作 "two 1s" ("两个一"）, 即 21。
21 被读作 "one 2",  "one 1" （"一个二" ,  "一个一") , 即 1211。

给定一个正整数 n（1 ≤ n ≤ 30），输出报数序列的第 n 项。

注意：整数顺序将表示为一个字符串。

 

示例 1:

输入: 1
输出: "1"
示例 2:

输入: 4
输出: "1211"
*/

//这是自己最开始想的一种方法，引入了一个辅助字符串数组tmp两个两个地往now上面做拼接。
char* countAndSay(int n) 
{
    char* pre = (char*)calloc(5000,sizeof(char));
    char* now = (char*)calloc(5000,sizeof(char));
    char tmp[3];
    tmp[2] = '\0';

    if(n == 1)
        return "1";
    if(n == 2)
        return "11";

    strcpy(pre,"11");
    int i,j;

    for(i = 3; i < n+1; i++)
    {
        strcpy(now,"\0");

        int cnt = 1;
        int length = strlen(pre);

        for(j = 1; j < length; j++)
        {
            if(pre[j-1] == pre[j])
            {
                cnt = cnt + 1;
            }

            else
            {
                tmp[0] = cnt + '0';
                tmp[1] = pre[j-1];
                now = strcat(now,tmp);
                cnt = 1;
            }
        }
        tmp[0] = cnt + '0';
        tmp[1] = pre[length-1];
        now = strcat(now,tmp);
        strcpy(pre,now);
    }
    return now;
}
//这是看到的别人的一个方法，不用另外开辟tmp作为辅助数组，直接索引now的下标赋值。
char* countAndSay(int n) 
{
   char* pre = (char*)calloc(5000, sizeof(char));
   char* now = (char*)calloc(5000, sizeof(char));
   pre[0] = '1';
   if(n == 1) 
       return pre;
   
   int i = 1, j = 0, count = 0, index = 0, len = strlen(pre);
   for(i = 1; i < n; i++)
   {
       count = 1;
       index = 0;
       for(j = 0; j < len; j++) 
       {
           if(pre[j] == pre[j + 1])
               count++;
           else 
           {
               now[index++] = '0' + count;
               now[index++] = pre[j];
               count = 1;   
           }
       }
       now[index] = '\0';
       len = index;
       memcpy(pre, now, index * sizeof(char));
   }
   return now;
}

/*
这道题最开始的结题思路不是很明晰，后来发现除了n=1时，后面每一个序列都是偶数个字符，每两个一组。
每一组的第一个字符表示的是字符c的个数，第二个字符表示字符c；
这样就可以引入一个长度为2的字符串数组作为辅助数组，然后在上一个报数序列上进行从左到右遍历，构建辅助数组不断往上拼接即可。
但是这里有一个坑，那就是这个字符串数组长度不能只是2，这样没有字符串结束符'\0'，这种不完整的字符串在调用字符串处理函数的时候会报错。
所以正确的做法是字符串数组的长度定义为3，并且在最后一个位置直接赋值一个结束符，后面的处理中只更改前两个元素即可。

外层大循环索引的是报数序列中的第n个字符串；
内层小循环索引的是上一组字符串pre中的每一个字符；
如果pre[j-1] == pre[j]，则字符计数器累加，
如果不相等，则把之前累计的相同字符的数值cnt和字符值pre[j-1]构建为辅助数组tmp作为这一次的字符串拼接原料，
计数器置1，然后继续向下索引后续的字符即可；
当索引到length-1时，下一步数组越界，跳出内层循环，表明这一组字符串索引完成，
但需要注意的是此时记得构建最后一组辅助数组tmp，然后做好拼接，至此，新字符串now才构建完成；
然后在进入下一次大循环之前要把这一次的now赋值给pre作为下一次循环中需要索引的字符串。
*/
