/*
给定一个整数数组 A，对于每个整数 A[i]，我们可以选择任意 x 满足 -K <= x <= K，并将 x 加到 A[i] 中。

在此过程之后，我们得到一些数组 B。

返回 B 的最大值和 B 的最小值之间可能存在的最小差值。

 

示例 1：

输入：A = [1], K = 0
输出：0
解释：B = [1]

示例 2：

输入：A = [0,10], K = 2
输出：6
解释：B = [2,8]

示例 3：

输入：A = [1,3,6], K = 3
输出：0
解释：B = [3,3,3] 或 B = [4,4,4]

 

提示：

    1 <= A.length <= 10000
    0 <= A[i] <= 10000
    0 <= K <= 10000
*/

int smallestRangeI(int* A, int ASize, int K)
{
    int max = A[0];
    int min = A[0];
    max = min = A[0];
    for(int i = 0; i < ASize; i++)
    {
        if(A[i] < min)
            min = A[i];
        if(A[i] > max)
            max = A[i];
    }
    
    return max - min - 2 * K > 0 ? max - min - 2 * K : 0;
}

/*
题目中是B的最大值减去B的最小值，差值最小；B的最大值和最小值如何取得呢？它们的差值和A的最大最小值差值有什么关系呢？
取A的最大值max和最小值min，让max-min尽可能更小； 
怎么做到最可能最小，就是让max减少k，让min增加+k，这样减数减少，被减少增加，那么差值就最小了。
但是有个条件就是max-k > min+k，如果不满足，则一定可以调整所有元素为一样的元素，此时新数组最大最小的差值就是0。
*/
