/*
爱丽丝和鲍勃有不同大小的糖果棒：A[i] 是爱丽丝拥有的第 i 块糖的大小，B[j] 是鲍勃拥有的第 j 块糖的大小。

因为他们是朋友，所以他们想交换一个糖果棒，这样交换后，他们都有相同的糖果总量。（一个人拥有的糖果总量是他们拥有的糖果棒大小的总和。）

返回一个整数数组 ans，其中 ans[0] 是爱丽丝必须交换的糖果棒的大小，ans[1] 是 Bob 必须交换的糖果棒的大小。

如果有多个答案，你可以返回其中任何一个。保证答案存在。

 

示例 1：

输入：A = [1,1], B = [2,2]
输出：[1,2]

示例 2：

输入：A = [1,2], B = [2,3]
输出：[1,2]

示例 3：

输入：A = [2], B = [1,3]
输出：[2,3]

示例 4：

输入：A = [1,2,5], B = [2,4]
输出：[5,4]

 

提示：

    1 <= A.length <= 10000
    1 <= B.length <= 10000
    1 <= A[i] <= 100000
    1 <= B[i] <= 100000
    保证爱丽丝与鲍勃的糖果总量不同。
    答案肯定存在。
*/

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int cmp(const void* a, const void* b)
{
    return *(int*)a - *(int*)b;
}

int* fairCandySwap(int* A, int ASize, int* B, int BSize, int* returnSize)
{
    *returnSize = 2;
    int* result = (int*)calloc(2 , sizeof(int));
    int A_sum = 0;
    int B_sum = 0;
    
    for(int i = 0; i < ASize; i++)
        A_sum += A[i];
    for(int i = 0; i < BSize; i++)
        B_sum += B[i];
    int diff = A_sum - (A_sum + B_sum) / 2;
    
    qsort(A, ASize, sizeof(int), cmp);
    qsort(B, BSize, sizeof(int), cmp);
    
    int i = 0;
    int j = 0;
    for( ; i < ASize && j < BSize; )
    {
        if(A[i] - B[j] > diff)
            j++;
        else if(A[i] - B[j] < diff)
            i++;
        else
        {
            result[0] = A[i];
            result[1] = B[j];
            return result;
        }
    }
    
    result[0] = A[0];
    result[1] = B[0];
    return result;
}

/*
最朴素的想法是：
int* fairCandySwap(int* A, int ASize, int* B, int BSize, int* returnSize)
{
    int ASum = 0, BSum = 0;
    for(int i = 0; i < ASize; i++)
    {
        ASum += A[i];
    }
    for(int i = 0; i < BSize; i++)
    {
        BSum += B[i];
    }
    
    for(int i = 0; i < ASize; i++)
    {
        int target = A[i]+(BSum-ASum)/2;
        for(int j = 0; j < BSize; j++)
        {
            if(B[j] == target)
            {
                int *ret = (int *)malloc(sizeof(int)*2);
                ret[0] = A[i];
                ret[1] = B[j];
                *returnSize = 2;
                return ret;
            }
        }
    }
    
    *returnSize = 0;
    return NULL;
}

但是双重循环时间复杂度较高。
*/

