/*
给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。

示例:

输入: [0,1,0,3,12]
输出: [1,3,12,0,0]
说明:

必须在原数组上操作，不能拷贝额外的数组。
尽量减少操作次数。
*/

void moveZeroes(int* nums, int numsSize) 
{
    int j = 0;
    for(int i = 0; i < numsSize; i++)
    {
        if(nums[i] != 0)
        {
            if(nums[j] == 0)
            {
                int tmp = nums[i];
                nums[i] = nums[j];
                nums[j] = tmp;
            }
            j++;
        }
    }
}

/*
这道题表面上是将0后移，其实在解决时可以认为是将非0元素前移。

在编程时可以使用双指针法，其中指针i为数组遍历指针，j指针指向数组中的0元素。
在遍历移动中，只有j指向的元素为0，i指向的元素为非0时，二者才交换位置，否则，
忽略本次循环。
*/
