/*
给定一种 pattern(模式) 和一个字符串 str ，判断 str 是否遵循相同的模式。

这里的遵循指完全匹配，例如， pattern 里的每个字母和字符串 str 中的每个非空单词之间存在着双向连接的对应模式。

示例1:

输入: pattern = "abba", str = "dog cat cat dog"
输出: true
示例 2:

输入:pattern = "abba", str = "dog cat cat fish"
输出: false
示例 3:

输入: pattern = "aaaa", str = "dog cat cat dog"
输出: false
示例 4:

输入: pattern = "abba", str = "dog dog dog dog"
输出: false
说明:
你可以假设 pattern 只包含小写字母， str 包含了由单个空格分隔的小写字母。    
*/

bool wordPattern(char* pattern, char* str) 
{
    int pattern_len = strlen(pattern);
    int str_len = strlen(str);
    int index = 0;
    
    char** words = malloc(str_len * sizeof(char*));
    for(int i = 0; i < str_len; i++)
        words[i] = malloc(50 * sizeof(char));
    
    words[index] = strtok(str," ");
    
    while(words[index] != NULL)
    {
        index++;
        words[index] = strtok(NULL," ");
        
        if(words[index] == NULL && index != pattern_len)
            return false;
    }
    
    for(int i = 0; i < pattern_len; i++)
    {
        for(int j = 1; j < pattern_len; j++)
        {
            if((pattern[i] == pattern[j] && strcmp(words[i],words[j]) != 0) || (pattern[i] != pattern[j] && strcmp(words[i],words[j]) == 0))
                return false;
        }
    }
    return true;
}

/*
解题流程：
1、预分配一个二维数组后续用来存储str字符串中的各个单词，二维数组的内存需要足够大，
行数要大于等于str中的单词个数（这里直接使用strlen(str)作为函数，虽然有冗余，但是能保证空间足够大），
每一个单词要有足够的空间来存储单词中的字母，正常英文单词的长度不会超过50，所以分配的内存大小为50*sizeof(char)；
2、使用strtok函数，以空格为分隔符，对单词进行逐个分离，并把分割后的单词存储在二维数组内，
如果二维数组中的单词个数和模式字符串中的字符个数不等，那么肯定不属于可以匹配的单词模式，直接返回false;
3、如果个数匹配，开始进行映射匹配的验证：
   以下两种情况返回false:
   1.pattern中的相同字符映射了str中的不同字符串；
   2.str中的相同字符串映射了pattern中的不同字符。
*/
