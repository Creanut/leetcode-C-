/*
给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。

最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。

你可以假设除了整数 0 之外，这个整数不会以零开头。

示例 1:

输入: [1,2,3]
输出: [1,2,4]
解释: 输入数组表示数字 123。
示例 2:

输入: [4,3,2,1]
输出: [4,3,2,2]
解释: 输入数组表示数字 4321。
*/

/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* plusOne(int* digits, int digitsSize, int* returnSize) 
{
    int carry = 1;
    
    for(int i = digitsSize - 1; i >= 0; i--)
    {
        int tmp = digits[i] + carry;
        carry = tmp / 10;
        digits[i] = tmp % 10;
    }
    
    if(carry == 0)
    {
        *returnSize = digitsSize;//新数组的位数
        int* new_digits = (int*)malloc(digitsSize * sizeof(int));
        new_digits = digits;
        return new_digits;
    }
    
    if(carry != 0)
    {
        *returnSize = digitsSize + 1;
        int* new_digits = (int*)malloc((digitsSize+1) * sizeof(int));
        new_digits[0] = 1;
        for(int j = 1; j < digitsSize + 1; j++)
            new_digits[j] = 0;
        
        return new_digits;
    }
    
    return 0;
}

/*
本题的核心是找出进位情况，并且分析在进位时，哪些情况是需要增加数组内存的。
循环体从数组的最后一位数字出发进行计算，设置进位标识carry，
数组中的数字与carry相加后，随即分离出新的进位carry = tmp / 10,并更新该位置的
值digits[i] = tmp % 10;

从最后一位循环至首位结束循环后，如果最终carry非零，则说明原数组中除掉最高位
的其他数字都是9，这样在循环体中才会出现一路累加，一路进位的情况。
在这种情况下则需要重新增加数组内存，并进行数组重构（首位位1，其余位为0），
其余情况则只需要分配和原数组一样大小的新数组即可。
*/
