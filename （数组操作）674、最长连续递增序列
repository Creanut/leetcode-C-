/*
给定一个未经排序的整数数组，找到最长且连续的的递增序列。

示例 1:

输入: [1,3,5,4,7]
输出: 3
解释: 最长连续递增序列是 [1,3,5], 长度为3。
尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。 

示例 2:

输入: [2,2,2,2,2]
输出: 1
解释: 最长连续递增序列是 [2], 长度为1。

注意：数组长度不会超过10000。
*/

int findLengthOfLCIS(int* nums, int numsSize)
{
    int current = 1;
    int max = 1;
    if(numsSize <= 1)
        return numsSize;
    
    for(int i = 0; i < numsSize - 1; i++)
    {
        if(nums[i] < nums[i+1])
            current++;
        else
            current = 1;
        max = max > current ? max : current;
    }
    
    return max;
}

/*
由于只是返回最长连续子序列的长度，不要求返回子序列，所以题目相对简单一些。
定义current变量用来记录当前遍历下的连续递增序列的元素个数，max变量用来记录
所遍历过的连续递增子序列中的最长序列的序列长度。
对于序列遍历过程中，如果右侧元素大于左侧元素，则current自增，一旦出现非递增
情况，current变为1，并将之前遍历的结果与max记录的结果进行比较，使max只记录
最长的情况。
遍历完数组之后，返回max即可。
*/
