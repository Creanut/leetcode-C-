/*
给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。

示例 1:

输入: "Let's take LeetCode contest"
输出: "s'teL ekat edoCteeL tsetnoc" 

注意：在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。

*/

void reverseString(char* s, int sSize)
{
    // char tmp;
    // for(int i = 0; i < sSize / 2; i++)
    // {
    //     tmp = s[i];
    //     s[i] = s[sSize - 1 - i];
    //     s[sSize - 1 - i] = tmp;
    // }
    char tmp;
    int right = sSize - 1;
    int left = 0;
    while(left <= right)
    {
        tmp = s[left];
        s[left] = s[right];
        s[right] = tmp;
        left++;
        right--;
    }
}

char * reverseWords(char * s)
{
    int s_len = strlen(s);
    int index = 0;
    for(int i = 0; i <= s_len; i++)
    {
        if(s[i] == ' ' || s[i] == '\0')
        {
            reverseString(s + i - index, index);
            index = 0;
        }
        else
            index++;
    }
    return s;
}

/*
这道题目的关键是找准反转单个单词的时间
对于单个单词的反转可以调用自定义函数，自定义函数可以使用双指针进行字符串的反转。
这里的index就表示单个单词的长度。
*/
