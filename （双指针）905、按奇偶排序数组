/*
给定一个非负整数数组 A，返回一个由 A 的所有偶数元素组成的数组，后面跟 A 的所有奇数元素。

你可以返回满足此条件的任何数组作为答案。

 

示例：

输入：[3,1,2,4]
输出：[2,4,3,1]
输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。
 

提示：

1 <= A.length <= 5000
0 <= A[i] <= 5000
*/

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* sortArrayByParity(int* A, int ASize, int* returnSize)
{
    if(A == NULL)
    {
        returnSize = 0;
        return NULL;
    }
        
    
    int i = 0;
    int j = ASize - 1;
    
    while(i < j)
    {
        int tmp = 0;
        if(A[i] % 2 != 0 && A[j] % 2 == 0)//前指针指向奇数，后指针指向偶数的时候，对调
        {
            tmp = A[i];
            A[i] = A[j];
            A[j] = tmp;
            i++;
            j--;
        }
        if(A[i] % 2 != 0 && A[j] % 2 != 0)//前指针指向奇数，后指针指向奇数的时候，前指针不动，后指针自增
            j--;
        if(A[i] % 2 == 0 && A[j] % 2 == 0)//前指针指向偶数，后指针也指向偶数的时候，前指针自增，后指针不动
            i++;
        if(A[i] % 2 == 0 && A[j] % 2 != 0)//前指针指向偶数，后指针指向奇数的时候，前后指针均自增
        {
            i++;
            j--;
        }
    }
    *returnSize = ASize;
    return A;
}

/*
考虑完两个指针所指数字的所有情况，前后移动、对调即可。
*/
