/*
给定一个整数，写一个函数来判断它是否是 3 的幂次方。

示例 1:

输入: 27
输出: true

示例 2:

输入: 0
输出: false

示例 3:

输入: 9
输出: true

示例 4:

输入: 45
输出: false

进阶：
你能不使用循环或者递归来完成本题吗？

*/

//循环解法，此类题目的最常用解法
bool isPowerOfThree(int n) 
{
    if(n <= 0)
        return false;
    
    while(n != 1)
    {
        if(n % 3 == 0)
            n /= 3;
        else
            return false;
    }
    return true;
}

//位运算解法
bool isPowerOfThree(int n) 
{
    return n > 0 && 1162261467 % n == 0;
}
/*
这种位运算的思路和其他求幂的位运算的思路一致，找到int类型中
3的幂的最大的那个数，让其与n做求余运算，如果结果为0，则说明
n中只有3作为因子，也就是说n是3的幂。
*/
