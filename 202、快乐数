/*
编写一个算法来判断一个数是不是“快乐数”。

一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。

示例: 

输入: 19
输出: true
解释: 
1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1
*/

bool isHappy(int n) 
{
    while(n != 1)
    {
        int result = 0;
        while(n)
        {
            result += pow((n % 10),2);
            n = n / 10;    
        }
             
        if(result == 4)
            return false;
        
        n = result;
    }
    return true;
}

/*
这道题又是一个数学小技巧的题目，
对于非快乐数，肯定最后会进入一个无限循环中，导致最后的结果肯定不是1，所以
题目的关键就是要推导出这个无限循环是什么。
有维基百科得到，所有的非快乐数最后陷入的循环是：
4 → 16 → 37 → 58 → 89 → 145 → 42 → 20 → 4 
快乐数肯定能够跳出while(n != 1)的大循环，
所以在大循环内部只要判断累加结果是否进入上述死循环即可，
一旦陷入上述死循环，则直接返回false.

其实如果不使用这个数学结论，则需要将每次按位平方累加后的结果存储到一个表中，
然后每次累加后的结果都和表中的数字进行比较，如果出现在表中，则说明进入到了
死循环，返回false即可。
*/
