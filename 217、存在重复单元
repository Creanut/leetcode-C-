/*
给定一个整数数组，判断是否存在重复元素。

如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。

示例 1:

输入: [1,2,3,1]
输出: true
示例 2:

输入: [1,2,3,4]
输出: false
示例 3:

输入: [1,1,1,3,3,4,3,2,4,2]
输出: true
*/

bool containsDuplicate(int* nums, int numsSize) 
{
    if(numsSize <= 1)
        return false;
    
    int max = nums[0];
    int min = nums[0];
    
    for(int i = 0; i < numsSize; i++)
    {
        if(nums[i] < min)
            min = nums[i];
        if(nums[i] > max)
            max = nums[i];
    }
    
    int len = max - min + 1;
    int* hash = (int*)malloc(len * sizeof(int));
    memset(hash,0,len);
    
    for(int i = 0; i < numsSize; i++)
    {
        if(hash[nums[i] - min] == 1)
            return true;
        
        hash[nums[i] - min] = 1;
    }
    return false;
}

/*
这道题首先的想法是对数组元素进行排序，然后遍历排序后的数组，如果出现相邻元素相同，
则说明原数组中有重复元素。这种思路比较常规，并且排序的时间复杂度和空间复杂度都比较高。

这里使用的是对原数组构建哈希表。
哈希表的映射函数是：hash[nums[i] - min] = 1;
哈希表长度：int len = max - min + 1;
如果在遍历中发现有重复元素，则hash[nums[i] - min] == 1，返回true即可。
*/
