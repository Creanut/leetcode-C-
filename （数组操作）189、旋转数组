/*
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]
示例 2:

输入: [-1,-100,3,99] 和 k = 2
输出: [3,99,-1,-100]
解释: 
向右旋转 1 步: [99,-1,-100,3]
向右旋转 2 步: [3,99,-1,-100]
说明:

尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
要求使用空间复杂度为 O(1) 的原地算法。
*/

//k步完成法，时间复杂度是O(k*n)
void rotate(int* nums, int numsSize, int k) 
{    
    int current = 0;
    int pre = nums[numsSize - 1];
    
    for(int i = 0; i < k; i++)
    {
        for(int j = 0; j < numsSize-1; j++)
        {
            current = nums[j];
            nums[j] = pre;
            pre = current;
        }
        pre = nums[numsSize - 1];
    }
}
/*
解释：这中方法是最符合题目说明的一种方法，
将数组内的所有元素集体向右移动k个位置，外层循环控制移动步骤，
内层循环控制每一步中，所有的元素依次右移一步，移动过程为:
1、记录当前指针所指元素的值；
2、把当前元素替换为前一个元素；
3、将1中记录的元素赋值给pre变量，用作下次循环中第2步的“前一个元素”。

在进行第k步之前，把当前数组中的最后一个元素的值记录下来用作下一步。
*/
