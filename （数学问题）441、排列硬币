/*
你总共有 n 枚硬币，你需要将它们摆成一个阶梯形状，第 k 行就必须正好有 k 枚硬币。

给定一个数字 n，找出可形成完整阶梯行的总行数。

n 是一个非负整数，并且在32位有符号整型的范围内。

示例 1:

n = 5

硬币可排列成以下几行:
¤
¤ ¤
¤ ¤

因为第三行不完整，所以返回2.
示例 2:

n = 8

硬币可排列成以下几行:
¤
¤ ¤
¤ ¤ ¤
¤ ¤

因为第四行不完整，所以返回3.
*/

int arrangeCoins(int n) 
{
    int k = 0;
    long sum = 0;
    
    while(sum < n)
    {
        k++;
        sum = sum + k;
    }
    
    if(sum > n)
        return k-1;
    else if(sum == k)
        return k;
    
    return;
}
/*
本方法是很自然的想法，逐行累加，如果累加的结果sum > n了，
则退出累加，此时判断累加结果sum与n之间的关系，如果sum > n，则说明
排列的最后一行不完整，返回k-1即可；如果sum == n，则说明n恰好可以
排列k排，返回k即可。
*/

int arrangeCoins(int n) 
{    
    return (sqrt(1 + 8 * (long)n) - 1) / 2;
}
/*
硬币的排列据是一个公差为1的等差数列，利用等差数列的求和公式即可。
已知等差数列求和公式n = (1 + x) * x / 2，
那么等式变换可得x = (-1 + sqrt(8 * n + 1)) / 2.
其中x为项数，即可排列的行数，由于返回的是int类型的值，天然取下整。
*/
