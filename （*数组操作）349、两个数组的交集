/*
给定两个数组，编写一个函数来计算它们的交集。

示例 1:

输入: nums1 = [1,2,2,1], nums2 = [2,2]
输出: [2]
示例 2:

输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出: [9,4]
说明:

输出结果中的每个元素一定是唯一的。
我们可以不考虑输出结果的顺序。
*/

/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
void SelectSort(int *nums,int numsSize)
{
   int min,temp;
   for(int i = 0; i < numsSize - 1; i++)
   {
        min = i;
        for(int j = i+1; j < numsSize; j++)
        {
            if(nums[min] > nums[j])
            {
                min = j;
            }
        }
        if(min != i)
        {
            temp = nums[min];
            nums[min] = nums[i];
            nums[i] = temp;
        }
    } 
}

int* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) 
{
    if(nums1Size == 0 || nums2Size == 0)
        return NULL;
    
    int temp,i,j;
    int* result = (int*)malloc(nums2Size * sizeof(int));

    //选择排序
    SelectSort(nums1,nums1Size);
    SelectSort(nums2,nums2Size);

    *returnSize = 0;
    temp = nums1[nums1Size-1] + 1;  //给temp赋一个不可能与nums1或nums2冲突的值
    for(i = 0,j = 0; i < nums1Size && j < nums2Size;)
    {
        if(nums1[i] > nums2[j])
        {
            j++;
        }
        else if(nums1[i] < nums2[j])
        {
            i++;
        }
        else
        {
            if(temp != nums1[i])
            {
                result[(*returnSize)++] = nums1[i];
                temp = nums1[i];
            }
            i++;
            j++;

        }
    }
    return result;
}


/*
对集合A和集合B进行排序（升序），设置两个指针p和q，同时指向集合A和集合B的最小值，
不相等的话移动*p和*q中较小值的指针，
相等的话同时移动指针p和q，并且记下相等的数字，为交集的元素之一，
依次操作，直到其中一个集合没有元素可比较为止。
*/
