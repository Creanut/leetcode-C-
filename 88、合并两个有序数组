/*
给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。

说明:

初始化 nums1 和 nums2 的元素数量分别为 m 和 n。
你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。

示例:

输入:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

输出: [1,2,2,3,5,6]
*/

void merge(int* nums1, int m, int* nums2, int n) 
{
    int i = m-1;
    int j = n-1;
    int index = m + n - 1;
    
    while(j >= 0)
        nums1[index--] = (i >= 0 && nums1[i] > nums2[j]) ? nums1[i--] : nums2[j--];
}

/*
这道题的解答是在评论区看到的一个代码及其简洁的回答，总体思路采用的是“倒序比较插入”的方法。
由于给定的两个数组都是有序的，所以在数组合并时，可以以长数组为目标数组，依次索引短数组中的元素，
与长数组中的元素进行比较并填充，把每次较大的元素依次填充在长数组的后面。

对于测试用例，该程序的运行流程为：
nums1 = 1 2 3 _ _ _
nums2 = 2 5 6

大循环驱动nums2进行元素检索
step1:
输入:j = 2,i = 2
输出：nums1[5] = nums2[2] = 6
     nums1 = 1 2 3 _ _ 6
     j = 1,i = 2
     
step2：
输入：j = 1,i = 2
输出：nums1[4] = nums2[1] = 5
     nums1 = 1 2 3 _ 5 6
     j = 0,i = 2

step3：
输入：j = 0,i = 2
输出：nums1[3] = nums1[2] = 3
     nums1 = 1 2 3 3 5 6
     j = 0,i = 1
     
step4：
输入：j = 0,i = 1
输出：nums1[2] = nums2[0] = 2
     nums1 = 1 2 2 3 5 6
     j = -1,i = 1
     
step5：
输入：j = -1,i = 1（j=-1不满足条件，说明短数组已经遍历比较完成了，即短数组中的数全部都已经被有序放在了长数组中）
输出：此时i = 1，即说明长数组中的nums[0]和nums[1]在循环中并没有参与比较，保留原位置不动。
      nums1 = 1 2 2 3 5 6
*/
