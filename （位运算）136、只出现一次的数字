/*
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

说明：

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

示例 1:

输入: [2,2,1]
输出: 1
示例 2:

输入: [4,1,2,1,2]
输出: 4
*/

int singleNumber(int* nums, int numsSize) 
{
    for(int i = 1; i < numsSize; i++)
        nums[0] ^= nums[i];
    
    return nums[0];
}

/*
异或大法好~

1、交换律：a ^ b ^ c <=> a ^ c ^ b

2、任何数于0异或为任何数 0 ^ n => n

3、相同的数异或为0: n ^ n => 0

  var a = [2,3,2,4,4]

  2 ^ 3 ^ 2 ^ 4 ^ 4等价于 2 ^ 2 ^ 4 ^ 4 ^ 3 => 0 ^ 0 ^3 => 3
  
  这道题不用异或的方式，可以先对数组排序，然后找到和前后数字都不相等的数字即可。
  
  数学的方法是，设单独的数字为a，其余数字的和为2A，去掉重复数字后的集合的元素和为A+a
  则a = 2 * (A + a) - (2 * A + a)
*/
