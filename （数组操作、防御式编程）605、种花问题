/*
假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。

给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数 n 。能否在不打破种植规则的情况下种入 n 朵花？能则返回True，不能则返回False。

示例 1:

输入: flowerbed = [1,0,0,0,1], n = 1
输出: True
示例 2:

输入: flowerbed = [1,0,0,0,1], n = 2
输出: False
注意:

数组内已种好的花不会违反种植规则。
输入的数组长度范围为 [1, 20000]。
n 是非负整数，且不会超过输入数组的大小。
*/

bool canPlaceFlowers(int* flowerbed, int flowerbedSize, int n)
{
    int* new_flowerbed = (int*)calloc(flowerbedSize + 2, sizeof(int));
    int new_flowerbed_size = flowerbedSize + 2;
    
    //利用for循环拷贝数组到指定位置
    // for(int i = 1; i < flowerbedSize + 1; i++)
    // {
    //     new_flowerbed[i] = flowerbed[i-1];
    // }
    
    //利用memcpy拷贝数组到指定位置
    memcpy(new_flowerbed + 1, flowerbed, flowerbedSize * sizeof(int));
    
    for(int i = 1; i < new_flowerbed_size - 1; i++)
    {
        if(new_flowerbed[i-1] == 0 && new_flowerbed[i] == 0 && new_flowerbed[i+1] == 0)
        {
            new_flowerbed[i] = 1;
            n--;
        }
    }
    
    if(n <= 0)
        return true;
    else 
        return false;
}

/*
本题的简化思想是，新种的花，至少要保证其前面又一个空位，其后面有一个空位，
所以简化来说就是判断原花坛数组中是否会出现三个连续的0，如果出现，则在这三个
连续的0的中间0的位置种花，然后继续遍历种过花的新数组寻找三个连续0的位置。
但是对于数组的头尾边界，只要有两个连续的0即可种花，如果单独判断边界问题，就会使
循环中的判断条件变得复杂，
因此可以采用“防御式编程”的方法来避开边界问题。
具体做法就是在开始数组遍历寻找之前，在原数组的头尾分别补0，人为将原本连续两个0
的情况变成连续三个0的情况，这样判断语句和非边界的判断语句即可保持一致，并且
不会影响有效的种花空间。
*/
