/*
给定一个带有头结点 head 的非空单链表，返回链表的中间结点。

如果有两个中间结点，则返回第二个中间结点。

 

示例 1：

输入：[1,2,3,4,5]
输出：此列表中的结点 3 (序列化形式：[3,4,5])
返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。
注意，我们返回了一个 ListNode 类型的对象 ans，这样：
ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.
示例 2：

输入：[1,2,3,4,5,6]
输出：此列表中的结点 4 (序列化形式：[4,5,6])
由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。
 

提示：

给定链表的结点数介于 1 和 100 之间。
*/

//两次遍历
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* middleNode(struct ListNode* head)
{
    struct ListNode* P = head;
    int node_cnt = 0;
    while(P != NULL)
    {
        P = P->next;
        node_cnt++;
    }
    P = head;
    for(int index = 0; index < node_cnt/2; )
    {
        index++;
        P = P->next;
    }
        
    return P;
}
/*
第一次遍历计算链表中节点的个数，计算中间节点的位置；
第二次遍历时记录遍历的节点下标，当便利到中间节点的下标时，停止遍历，返回当前节点的指针即可。
*/

//快慢指针
struct ListNode* middleNode(struct ListNode* head)
{
    struct ListNode *mid = head; 
    struct ListNode *tail = head->next;
    
    while(tail)
    {
        mid = mid->next;
        tail = tail->next;
        if (tail)
        {
            tail = tail->next;
        }
    }
    
    return mid;
}
/*
快指针的移动速度是慢指针的两倍，当快指针到链表末尾的时候，慢指针恰好指向链表中间。
*/
