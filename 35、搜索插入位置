/*
给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。

你可以假设数组中无重复元素。

示例 1:

输入: [1,3,5,6], 5
输出: 2
示例 2:

输入: [1,3,5,6], 2
输出: 1
示例 3:

输入: [1,3,5,6], 7
输出: 4
示例 4:

输入: [1,3,5,6], 0
输出: 0
*/

int searchInsert(int* nums, int numsSize, int target) 
{
    int i;
    if(!numsSize)
        return 0;
    for(i = 0; i < numsSize; i++)
    {
        if(target <= nums[i])
            break;
    }
    return i;
}

/*
本题思路比较简单，由于是有序数组，只要从头索引挨个对比target与各个元素的值就可以了，
如果遇到相等的元素，则直接返回该元素的位置；
如果遇到比target大的元素，说明数组中没有target这个元素，将target插入在这个元素之前就可以了，
插入后的target的位置就是这个元素的位置。

由于是有序数组，在进行查找时也可以使用折半查找的方式来降低程度的时间复杂度。
折半查找的核心代码为：
int searchInsert(int* nums, int numsSize, int target) 
{
    int left = 0, right = numsSize - 1;//定义左指针和右指针
    int mid = (left + right) / 2;//定义索引指针
    while(left<right)//查找条件
    {
        if（nums[mid] < target）//查找值在右半边
        {
            left = mid + 1;//重新定义左指针
            mid = (left + right) / 2;//重新计算索引值
        }
        else if(nums[mid] > target)//查找值在左半边
        {
            right = mid - 1;
            mid = (left + right) / 2;
        }
        else//目标值和索引值相等
            return mid;
        
        if(nums[left] >= target)//如果查找值没有在数组中
            return left;
        else
            return left + 1;
    }
}

*/
