/*
给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。

找到所有在 [1, n] 范围之间没有出现在数组中的数字。

您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。

示例:

输入:
[4,3,2,7,8,2,3,1]

输出:
[5,6]
*/

int abs(n)
{
    return n > 0 ? n : n * (-1);
}

int* findDisappearedNumbers(int* nums, int numsSize, int* returnSize) 
{
    for(int i = 0; i < numsSize; i++)
    {
        nums[abs(nums[i]) - 1] = -abs(nums[abs(nums[i]) - 1]);
    }
    
    int len = 0;
    for(int i = 0; i < numsSize; i++)
    {
        if(nums[i] > 0)
            len++;
    }
    
    int* result = malloc(sizeof(int) * len);
    if(!result)
        return NULL;
    *returnSize = len;
    int index = 0;
    
    for(int i = 0; i < numsSize; i++)
    {
        if(nums[i] > 0)
        {
            result[index] = i + 1;
            index++;
        }
    }
    return result;
}

/*
参考别人的一个很巧妙的思路：
第一次遍历，把数组中的值value-1作为key值，并将该key值对应的数字取绝对值的相反数。
第二次遍历，重构后的nums数组中，仍为正值的数其所对应的下标i+1就是没有出现的数字。
*/
