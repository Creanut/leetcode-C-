/*
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶
*/

int climbStairs(int n) 
{
    int ways = 0;
    
    if(n == 1)
       ways = 1;
    if(n == 2)
        ways = 2;
    
    if(n > 2)
    {
        int pre = 2, p_pre = 1;
        for(int i = 3; i < n+1; i++)
        {
            ways = pre + p_pre;
            p_pre = pre;
            pre = ways;
        }
    }
    
    return ways;
}

/*
这道题属于最简单的动态规划类的问题，解决这类题所秉承的思想就是大事化小，小事化了。
动态规划类的问题千万不要往枚举所有可能情况的思路上靠，虽然也可能得出正确结果，
但是时间复杂度和空间复杂度都极高。
一般动态规划问题的三要素是：最优子结构、边界、状态转移方程，其推导过程类似于数学上的
数学归纳法，解决动态规划问题可以先采用递归方法进行解决，然后在递归的基础上优化
一般即可得到动态规划问题的最优解决方式。

对于这道题，由于每次可以爬1个或者2个台阶，因此对于n个台阶，最后一步可以是在第n-2个台阶
处上2个台阶，也可以是在第n-1个台阶处上1个台阶。在第n-2个台阶处时，方法数表示为f(n-2)，
在第n-1个台阶处时，方法数表示为f(n-1)，则在第n个台阶处时，方法数f(n)表示为f(n) = f(n-2) + f(n-1)
根据归纳的思想：
最优子结构就是f(n-2)和f(n-1)
边界就是n=1时，f(1) = 1;n=2时，f(2) = 2;
状态转移方程就是f(n) = f(n-1) + f(n-1).
因此很容易写出递归函数：
int climbStairs(int n) 
{
    int ways = 0;
    
    if(n == 1)
       ways = 1;
    if(n == 2)
        ways = 2;
    
    if(n > 2)
    {
        ways = climbStairs(n-1) + climbStairs(n-2);
    }
    
    return ways;
}

提交后发现这个算法超时了，在这个算法中，当n>2时，
计算climbStairs(n-1)和climbStairs(n-2)时进行了大量的重复计算，耗费了大量的时间和空间，
但实际n的结果只和它之前的两项结果有关，因此，只要每次计算保留前两次的计算结果，就避免了
递归函数的重复调用，因此将递归转变为迭代就可以极大减小空间复杂度和时间复杂度，形成最终的
解决程序。
*/
