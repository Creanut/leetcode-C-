/*
学校在拍年度纪念照时，一般要求学生按照 非递减 的高度顺序排列。

请你返回至少有多少个学生没有站在正确位置数量。该人数指的是：能让所有学生以 非递减 高度排列的必要移动人数。

 

示例：

输入：[1,1,4,2,1,3]
输出：3
解释：
高度为 4、3 和最后一个 1 的学生，没有站在正确的位置。
 

提示：

1 <= heights.length <= 100
1 <= heights[i] <= 100
*/

int cmp(const void* a, const void* b)
{
    return *(int*)a - *(int*)b;
}

int heightChecker(int* heights, int heightsSize)
{
    int* origin_heights = (int*)malloc(heightsSize * sizeof(int));
    int cnt = 0;
    memcpy(origin_heights, heights, heightsSize * sizeof(heights[0]));
    qsort(heights, heightsSize, sizeof(int), cmp);
    
    for(int i = 0; i < heightsSize; i++)
    {
        if(heights[i] != origin_heights[i])
            cnt++;
    }
    
    return cnt++;
}

/*
思路简单：
1、对给定数组按照非递减顺序排序；
2、遍历非递减数组和原数组，对应位置元素不相等的即为要移动的元素。
*/
