/*
统计所有小于非负整数 n 的质数的数量。

示例:

输入: 10
输出: 4
解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。
*/

int countPrimes(int n) 
{
    if(n < 3)
        return 0;
    
    int* tmp = (int*)calloc(n,sizeof(int));
    memset(tmp,0,sizeof(tmp));
    tmp[0] = 1;
    tmp[1] = 1;

    for(int i = 2; i * i < n; i++)
    {
        if(tmp[i] == 0)
        {
            for(int j = i * i; j < n; j += i)
                tmp[j] = 1;
        }
    }

    int result = 0;
    for(int k = 0; k < n; k++)
    {
        if(tmp[k] == 0)
            result++;
    }
    return result;
}

/*
厄拉多塞筛法：
由于是统计小于n的所有质数的个数，则0，1均不是质数，最小的质数是2.
首先是特殊情况处理，如果n小于3，则返回0；
否则，定义一个长度为n的数组，分别对应0~n-1，
在非质数位置赋值1，质数位置赋值0，最后统计数组中的0的个数即可。

遍历数组从2开始，2处为0，则说明2为质数，然后把2的倍数的位置都赋值为1；
然后遍历至3，3处为0，则说明3为质数，然后把3的倍数的位置都赋值为1；
……
最后统计数组中0的个数即可。

在上面遍历索引的时候用到了一个非常好的技巧. 即遍历数组的时候只需遍历到根号n即可，
这个技巧是可以验证的,比如说求9以内的质数个数,那么只要划掉sqrt(9)以内的质数倍数,剩下的即全为质数. 
所以在划去倍数的时候也是从i*i开始划掉,而不是i+i.
*/
