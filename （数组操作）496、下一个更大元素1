/*
给定两个没有重复元素的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。找到 nums1 中每个元素在 nums2 中的下一个比其大的值。

nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出-1。

示例 1:

输入: nums1 = [4,1,2], nums2 = [1,3,4,2].
输出: [-1,3,-1]
解释:
    对于num1中的数字4，你无法在第二个数组中找到下一个更大的数字，因此输出 -1。
    对于num1中的数字1，第二个数组中数字1右边的下一个较大数字是 3。
    对于num1中的数字2，第二个数组中没有下一个更大的数字，因此输出 -1。

示例 2:

输入: nums1 = [2,4], nums2 = [1,2,3,4].
输出: [3,-1]
解释:
    对于num1中的数字2，第二个数组中的下一个较大数字是3。
    对于num1中的数字4，第二个数组中没有下一个更大的数字，因此输出 -1。

注意:

    nums1和nums2中所有元素是唯一的。
    nums1和nums2 的数组大小都不超过1000。
*/

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* nextGreaterElement(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize)
{
    int *nums = malloc(sizeof(int) * nums1Size);
    *returnSize = nums1Size;
    
    for(int i = 0; i < nums1Size; i++)
    {
        for(int j = 0; j < nums2Size; j++)
        {
            if(nums1[i] == nums2[j])
            {
                for(int k = j; k < nums2Size; k++)
                {
                    if(nums2[k] > nums2[j])
                    {
                        nums[i] = nums2[k];
                        break;
                    }
                    else
                        nums[i] = -1;
                        
                }
            }
        }
    }
    return nums;
}
/*
这道题可以说是使用了直抒胸臆法，即按照题目规定的寻找流程，一步步往下找即可。
对于应该返回的数组，其大小应该与所给的子数组nums1的大小一致，因为返回的数组中
需要存放的是nums1中的数字在nums2中的右侧比它大的数字，如果nums2中没有，则加入
占位数-1，所以返回的nums数组中的数字个数和nums1中的数字个数是保持一致的。
按照题目的要求，其寻找流程如下：
1、遍历nums1数组，将nums1数组中的数字与nums2中的数组中的数字进行对比，找到
nums1中的数字在nums2中的位置；
2、找到nums1中数字在nums2中的位置后，从该位置开始，寻找该位置右侧比该数字大
的第一个数字，如果找到，则跳出搜索，否则返回-1；
3、继续进行nums1中数字在nums2中的匹配循环。
*/
