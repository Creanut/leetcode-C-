/*
给定一个字符串和一个整数 k，你需要对从字符串开头算起的每个 2k 个字符的前k个字符进行反转。如果剩余少于 k 个字符，则将剩余的所有全部反转。如果有小于 2k 但大于或等于 k 个字符，则反转前 k 个字符，并将剩余的字符保持原样。

示例:

输入: s = "abcdefg", k = 2
输出: "bacdfeg"

要求:

    该字符串只包含小写的英文字母。
    给定字符串的长度和 k 在[1, 10000]范围内.
*/

void reverse(char* s, int p_left, int p_right) 
{    
    while(p_left < p_right)
    {
        char tmp;
        tmp = s[p_left];
        s[p_left] = s[p_right];
        s[p_right] = tmp;
        
        p_left++;
        p_right--;
    }
}

char* reverseStr(char* s, int k)
{
    int s_len = strlen(s);
    for(int i = 0; i < s_len; i += 2 * k)
    {
        if(i + 2 * k <= s_len || i + k <= s_len)
            reverse(s, i, i+k-1);
        else
            reverse(s, i, s_len-1);
    }
    return s;
}

/*
这道题就是在反转字符串1（整体字符串全部反转）的基础上，设置了反转区间进行分段反转。
因此，可以直接将整体字符串反转的函数当做本函数的调用子函数，本函数的主体进行字符串的分段控制即可。
分段相当于是将字符串中的每k个字符分成一组，交叉反转，所以循环的累加步长是2 * k；
如果没有到最后一组，则满足i + 2 * k <= s_len；此时反转每一组中的前k个字符，即i到i+k-1区间；
如果到了最后一组，若最后一组不到2*k个字符，则满足i + k <= s_len；此时反转字符串中的前k个字符，即i到i+k-1区间；
如果到了最后一组，若最后一组不到k个字符，则从当前字符起到最后一个字符全部反转，即i到s_len-1区间。
*/
