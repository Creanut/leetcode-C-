/*
给定一副牌，每张牌上都写着一个整数。

此时，你需要选定一个数字 X，使我们可以将整副牌按下述规则分成 1 组或更多组：

    每组都有 X 张牌。
    组内所有的牌上都写着相同的整数。

仅当你可选的 X >= 2 时返回 true。

示例 1：

输入：[1,2,3,4,4,3,2,1]
输出：true
解释：可行的分组是 [1,1]，[2,2]，[3,3]，[4,4]

示例 2：

输入：[1,1,1,2,2,2,3,3]
输出：false
解释：没有满足要求的分组。

示例 3：

输入：[1]
输出：false
解释：没有满足要求的分组。

示例 4：

输入：[1,1]
输出：true
解释：可行的分组是 [1,1]

示例 5：

输入：[1,1,2,2,2,2]
输出：true
解释：可行的分组是 [1,1]，[2,2]，[2,2]


提示：

    1 <= deck.length <= 10000
    0 <= deck[i] < 10000
*/

bool hasGroupsSizeX(int* deck, int deckSize) 
{
    int mark[10001] = {0};
    for(int i = 0 ; i < deckSize ; i++)
    {
        mark[deck[i]] += 1;
    }
    int x;
    int flag = 1;
    for(int i = 2 ; i < 10001 ; i++)
    {
        flag = 1;
        for(int j = 0 ; j < 10001 ; j++)
        {
            if(mark[j] != 0)
            {
                if(mark[j] % i != 0)
                {
                    flag = 0;
                    break;
                }
            }
        }
        if(flag)
            break;
    }
    if(flag)
        return true;
    return false;
}

/*
以上程序的解题思路如下：
定义哈希表记录所给数组中每一个数字出现的次数；
首先假定最大公约数为2，然后在所有的次数依次验证能否被2整除，
然后外层循环将公约数自增，如果在内层循环的次数遍历中发现不能被公约数整除的次数，
则说明这个公约数不是真正的公约数，退出内层循环，外层循环继续自增，直到求得最大公约数。
*/
