/*
你现在是棒球比赛记录员。
给定一个字符串列表，每个字符串可以是以下四种类型之一：
1.整数（一轮的得分）：直接表示您在本轮中获得的积分数。
2. "+"（一轮的得分）：表示本轮获得的得分是前两轮有效 回合得分的总和。
3. "D"（一轮的得分）：表示本轮获得的得分是前一轮有效 回合得分的两倍。
4. "C"（一个操作，这不是一个回合的分数）：表示您获得的最后一个有效 回合的分数是无效的，应该被移除。

每一轮的操作都是永久性的，可能会对前一轮和后一轮产生影响。
你需要返回你在所有回合中得分的总和。

示例 1:

输入: ["5","2","C","D","+"]
输出: 30
解释: 
第1轮：你可以得到5分。总和是：5。
第2轮：你可以得到2分。总和是：7。
操作1：第2轮的数据无效。总和是：5。
第3轮：你可以得到10分（第2轮的数据已被删除）。总数是：15。
第4轮：你可以得到5 + 10 = 15分。总数是：30。
示例 2:

输入: ["5","-2","4","C","D","9","+","+"]
输出: 27
解释: 
第1轮：你可以得到5分。总和是：5。
第2轮：你可以得到-2分。总数是：3。
第3轮：你可以得到4分。总和是：7。
操作1：第3轮的数据无效。总数是：3。
第4轮：你可以得到-4分（第三轮的数据已被删除）。总和是：-1。
第5轮：你可以得到9分。总数是：8。
第6轮：你可以得到-4 + 9 = 5分。总数是13。
第7轮：你可以得到9 + 5 = 14分。总数是27。
注意：

输入列表的大小将介于1和1000之间。
列表中的每个整数都将介于-30000和30000之间。
*/

int calPoints(char ** ops, int opsSize)
{
    int* goals = (int*)calloc(opsSize , sizeof(int));
    int C_flag = INT_MIN;
    int sum = 0;
    int j;
    
    for(int i = 0; i < opsSize; i++)
    {
        switch(ops[i][0])
        {
            case 'C':
                goals[i] = C_flag;
                j = i - 1;
                while(goals[j] == C_flag)
                    j--;
                sum = sum - goals[j];
                goals[j] = C_flag;
                break;
                
            case 'D':
                j = i - 1;
                while(goals[j] == C_flag)
                    j--;
                goals[i] = goals[j] * 2;
                sum = sum + goals[i];
                break;
                
            case '+':
                j = i - 1;
                while(goals[j] == C_flag)
                    j--;
                goals[i] += goals[j--];
                /*
                上句也可以写成：
                goals[i] += goals[j];
                j--;
                */
                while(goals[j] == C_flag)
                    j--;
                goals[i] += goals[j];
                sum = sum + goals[i];
                break;
                
            default:
                goals[i] = atoi(ops[i]);
                sum = sum + goals[i];
                break;
        }
    }
    free(goals);
    return sum;
}

/*
这道题目的思路就是遍历二维字符串数组，根据当前字符串中的字符示意，来分别处理；
定义goals数组记录第i个回合的得分情况，sum计算截至第i回合的总得分情况，C_flag为本回合没有有效得分的标志位。
外层循环控制字符串的遍历，循环内部使用分支来判断操作符即可。
首先分析题目，可以看出操作符C的处理最复杂，只有C出现的时候，本回合是没有有效得分的。

C一旦出现，需要进行的动作是：
1、本回合没有有效得分（goals[i] = C_flag）;
2、得分指针指向上一个有效回合（有有效得分的回合）
    j = i - 1;
    while(goals[j] == C_flag)//直到找到有效的回合
        j--;
3、计算累加分（sum = sum - goals[j]）
4、把上一个有效回合的得分置为无效（goals[j] = C_flag）

D一旦出现，需要进行的动作是：
1、得分指针指向上一个有效回合（有有效得分的回合）
    j = i - 1;
    while(goals[j] == C_flag)
        j--;
2、对上一个有效得分进行双倍操作赋值给本回合得分（goals[i] = goals[j] * 2）
3、计算累加分（sum = sum + goals[i]）

+一旦出现，需要进行的操作是：
1、得分指针指向上一个有效回合（有有效得分的回合）
    j = i - 1;
    while(goals[j] == C_flag)
        j--;
2、本次得分累加上一个有效得分，并将指针继续前移，寻找上上一次的有效回合
    goals[i] += goals[j--];
    while(goals[j] == C_flag)
        j--;
    (或者写成：goals[i] += goals[j]; j--;)
3、在累加上一个有效得分的基础上，继续累加上上一次的有效得分（goals[i] += goals[j]）
4、计算累加分（sum = sum + goals[i]）

整数字符串出现，需要进行的操作是：
1、将整数字符串转换为整数赋值给本回合的得分（goals[i] = atoi(ops[i])）
2、计算累加分（sum = sum + goals[i]）
*/
