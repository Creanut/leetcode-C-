/*
给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。

 

示例 1：

输入：[-4,-1,0,3,10]
输出：[0,1,9,16,100]
示例 2：

输入：[-7,-3,2,3,11]
输出：[4,9,9,49,121]
 

提示：

1 <= A.length <= 10000
-10000 <= A[i] <= 10000
A 已按非递减顺序排序。
*/

int* sortedSquares(int* A, int ASize, int* returnSize)
{
    int* result = (int*)malloc(ASize * sizeof(int));
    *returnSize = ASize;
    int i = 0, j = ASize - 1;
    int k = ASize - 1;
    
    while(i <= j)
    {
        if(abs(A[i]) < abs(A[j]))
        {
            result[k] = A[j]*A[j];
            k--;
            j--;
        }
        else
        {
            result[k] = A[i]*A[i];
            k--;
            i++;
        }
    }
    
    return result;
}

/*
由于原数组是有序数组，所以使用双指针遍历数组是最佳选择，
遍历的同时计算元素的绝对值，绝对值较大的，其平方值也较大，
将该值倒序存入新数组即可。
*/
