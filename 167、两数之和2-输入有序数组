/*
给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。

函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。

说明:

返回的下标值（index1 和 index2）不是从零开始的。
你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。
示例:

输入: numbers = [2, 7, 11, 15], target = 9
输出: [1,2]
解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。
*/

/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* numbers, int numbersSize, int target, int* returnSize) 
{
    int* result = (int*)malloc(2 * sizeof(int));
    int p_left = 0;
    int p_right = numbersSize - 1;
    
    while(p_left < p_right)
    {
        int sum = numbers[p_left] + numbers[p_right];
        
        if(sum == target)
            break;
        else if(sum < target)
            p_left++;
        else if(sum > target)
            p_right--;
    }
    result[0] = p_left + 1;
    result[1] = p_right + 1;
    *returnSize = 2;
    return result;
}

/*
由于给定的数组是有序数组，所以在遍历数组时可以使用讨巧的方式，
没必要使用双层循环对数组实行复杂度那么高的遍历手段。
遍历过程使用双指针，一头一尾进行移动，头指针p_left所指的数字肯定比尾指针p_right
所指的数字要小。所以当所指数字和sum小于target时，向右移动左指针找寻更大的加数即可；
同理，当所指数字和sum大于target时，说明加数中的大数字（p_right的指向数字）太大，
向左移动找寻更小的数字即可。

注意返回的下标不是从0开始的。
*/
