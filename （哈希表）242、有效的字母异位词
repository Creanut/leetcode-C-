/*
给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的一个字母异位词。

示例 1:

输入: s = "anagram", t = "nagaram"
输出: true
示例 2:

输入: s = "rat", t = "car"
输出: false
说明:
你可以假设字符串只包含小写字母。

进阶:
如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？
*/

bool isAnagram(char* s, char* t) 
{
    char s_hash[26] = {'0'};
    char t_hash[26] = {'0'};
    int s_len = strlen(s);
    int t_len = strlen(t);
    
    for(int i = 0; i < s_len; i++)
        s_hash[s[i] - 'a']++;
    for(int i = 0; i < t_len; i++)
        t_hash[t[i] - 'a']++;
    for(int i = 0; i < 26; i++)
        if(s_hash[i] != t_hash[i])
            return false;
    return true;
}

/*
异位词中包含的字母类型和对应的个数一定是相同的，
因此可以对两个字符串进行哈希映射，最后比较两个
字符串的哈希映射是否相同即可。

如果包含的有Unicode字符，则哈希表建立大一些就行了。

这里在提交代码时发现一个问题是strlen函数的执行时间
会很长，所以在调用strlen时只调用一次即可，将结果
存储在一个全局变量内，for循环调用中只需要和这个全局变量
进行比较即可。
*/
