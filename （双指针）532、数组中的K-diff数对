/*
给定一个整数数组和一个整数 k, 你需要在数组里找到不同的 k-diff 数对。这里将 k-diff 数对定义为一个整数对 (i, j), 其中 i 和 j 都是数组中的数字，且两数之差的绝对值是 k.

示例 1:

输入: [3, 1, 4, 1, 5], k = 2
输出: 2
解释: 数组中有两个 2-diff 数对, (1, 3) 和 (3, 5)。
尽管数组中有两个1，但我们只应返回不同的数对的数量。

示例 2:

输入:[1, 2, 3, 4, 5], k = 1
输出: 4
解释: 数组中有四个 1-diff 数对, (1, 2), (2, 3), (3, 4) 和 (4, 5)。

示例 3:

输入: [1, 3, 1, 5, 4], k = 0
输出: 1
解释: 数组中只有一个 0-diff 数对，(1, 1)。

注意:

    数对 (i, j) 和数对 (j, i) 被算作同一数对。
    数组的长度不超过10,000。
    所有输入的整数的范围在 [-1e7, 1e7]。
*/

int cmp(const void* a,const void* b)
{
    return *(int*)a - *(int*)b;
}

int findPairs(int* nums, int numsSize, int k)
{
    int cnt = 0;
    int left_num = 1e7 + 1;
    
    if(k < 0 || numsSize < 2)
        return 0;
    qsort(nums,numsSize,sizeof(int),cmp);
    
    for(int left = 0; left < numsSize; left++)
    {
        if(nums[left] != left_num)
        {
            left_num = nums[left];
            for(int right = left + 1; right < numsSize && nums[right] <= nums[left] + k; right++)
            {
                if(nums[right] == nums[left] + k)
                {
                    cnt++;
                    break;
                }
            }
        }
    }
    
    return cnt;
}

/*
解题思路：
1、对所给数组进行升序排序；
2、采用一前一后两个指针对数组中的元素进行遍历，右侧指针从左侧指针的下一个元素开始遍历，
由于是排序后的数组，因此右指针指向的数一定比左指针的大，当找到左数+k的那个数之后，便
可以立即跳出循环；
3、由于有重复数据，所以会出现多个相同的左数与一个右数相匹配的情况，但是这按照题目要求
是属于一种情况，因此，在进行右数遍历之前，需要判断此时左指针left所指向的数字和上一次
左指针指向的数字是否相等，如果相等，则说明会出现重复计数的情况，因此需要跳过该指针，
所以在进行右数遍历之前需要进行一次判断，只有当left指针指向的数字和上一次left指向的
数字不同时，才进行右数遍历。
*/
