/*
假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值 gi ，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 sj 。如果 sj >= gi ，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。
注意：
你可以假设胃口值为正。
一个小朋友最多只能拥有一块饼干。
示例 1:
输入: [1,2,3], [1,1]

输出: 1

解释: 
你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
所以你应该输出1。
示例 2:
输入: [1,2], [1,2,3]

输出: 2

解释: 
你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
你拥有的饼干数量和尺寸都足以让所有孩子满足。
所以你应该输出2.
*/

int compare(const void* arg1, const void* arg2)
{
    return *(int*)arg1-*(int*)arg2;
}

int findContentChildren(int* g, int gSize, int* s, int sSize)
{
    int child = 0;
    int cookie = 0;
    qsort(g,gSize,sizeof(int),compare);
    qsort(s,sSize,sizeof(int),compare);
    
    while(child < gSize && cookie < sSize)
    {
        if(g[child] <= s[cookie])
            child++;
        cookie++;
    }
    return child;
}

/*
题目花里胡哨，分析核心，其实就是个数组排序的问题。
题目的本质就是找出s数组中比g数组中数字大或者相等的数字的个数（以两个数组中较短的数组的长度为参考）
所以解决方案就是：
第一步：对两个数组进行排序
第二步：顺次比较两个数组中元素的大小，
如果s中的元素大于等于g中的元素，则说明s中的饼干可以满足对应的小朋友的胃口，
如果不满足判断条件，则抛弃当前的饼干（因为是排序数组，当前的胃口不满足，后面的大胃口就更不满足），
饼干索引指针顺次向后移动。

最终返回满足的小朋友的个数。
*/
