/*
实现 strStr() 函数。

给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。

示例 1:

输入: haystack = "hello", needle = "ll"
输出: 2
示例 2:

输入: haystack = "aaaaa", needle = "bba"
输出: -1
说明:

当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。

对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。
*/

int strStr(char* haystack, char* needle) 
{
    int n;
    int i = 0;
    if(*needle)
    {
        while(*haystack)
        {
            for(n = 0; *(haystack+n) == *(needle+n); n++)
            {
                if(*(needle+n+1)=='\0')//needle字符串的最后一个字符是‘\0’，此条件是用来判断是不是已经遍历完needle了
                    return i;
            }
            haystack++;
            i++;
        }
        return -1;
    }
    else
        return 0;
}

/*
这道题首先是needle为空时情况处理。
非空情况下：
1、首先应该开始遍历母串，i作为母串遍历的指针，用以记录母串的遍历位置；
2、在遍历过程中，一旦发现有字符和子串的第一个字符相同，触发“字符对比中断”，母串遍历停止（保护首字符相同的位置），
开始在中断内进行字符串的比较，以中断内的遍历指针n作为中断内的遍历驱动变量，开始母串与子串的挨个字符对比模式；
3、一旦中断内发现子串和母串局部完全匹配（也就是n一直驱动到子串结束，发现母串局部字符串和子串完全一致），则直接
返回进入中断前保护的母串遍历的位置，程序结束；
4、如果发现子串和母串的局部字符串不完全匹配（在n驱动的过程中，在未到达子串末尾之前出现了不匹配的字符），直接退出
中断，回到母串遍历模式，直到再次进入中断；
5、如果母串遍历结束后，没有找到完全匹配的局部字符串，则返回-1.
*/
