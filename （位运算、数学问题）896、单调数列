/*
如果数组是单调递增或单调递减的，那么它是单调的。

如果对于所有 i <= j，A[i] <= A[j]，那么数组 A 是单调递增的。 如果对于所有 i <= j，A[i]> = A[j]，那么数组 A 是单调递减的。

当给定的数组 A 是单调数组时返回 true，否则返回 false。

 

示例 1：

输入：[1,2,2,3]
输出：true

示例 2：

输入：[6,5,4,4]
输出：true

示例 3：

输入：[1,3,2]
输出：false

示例 4：

输入：[1,2,4,5]
输出：true

示例 5：

输入：[1,1,1]
输出：true

 

提示：

    1 <= A.length <= 50000
    -100000 <= A[i] <= 100000
*/

bool isMonotonic(int* A, int ASize)
{
    bool increase = false;
    bool decrease = false;
    
    for(int i = 0; i < ASize-1; ++i)
    {
        increase |= A[i] < A[i+1];
        decrease |= A[i] > A[i+1];
        if(increase && decrease)
            return false;
    }
    
    return true;
} 

/*
解题思想：
如果一个数列在遍历过程中，时而递增（只要有一次上升，increase就被置一），
时而递减（只要有一次下降，decrease就被置一），那么这个数列就不是单调的，
所以在遍历过程中，如果出现increase和decrease同时为1的情况，那么就说明
数列不是单调的。

对于A[i]和A[i+1]相等的情况，位与运算则会保持之前的状态，不会改变之前遍历
数组的增减性。
*/

bool isMonotonic(int* A, int ASize) 
{
    int up=1,down=1;
    for(int i=0;i<ASize-1;i++)
    {
        if(A[i]>=A[i+1])
            down++;
        if(A[i]<=A[i+1])
            up++;
    }
    if(up==ASize||down==ASize)
        return true;
    else
        return false;
}

/*
另一种方法：
对每一步递增或者递减进行计数（起始值为1），如果是递增序列或者
递减序列，则步数等于元素个数。
*/

bool isMonotonic(int* A, int ASize) {
    bool flag = A[0] >= A[ASize-1]? true:false;
    if (flag)
    {
        for ( int i = 0; i < ASize-1; i++ )
        {
            if (A[i] < A[i+1])
                return false;
        }
    }
    else
    {
        for ( int i = 0; i < ASize-1; i++ )
        {
            if (A[i] > A[i+1])
                return false;
        }
    }
    return true;
}

/*
另一种方法：
对于单调数列，递减的话，最后一个元素一定小于等于第一个元素；
递增的话，最后一个元素一定大于等于第一个元素。
所以可以先比较数组中第一个元素和最后一个元素，将比较结果作为
数组递增或者递减的标志，
在后续的遍历过程中，如果比较结果和之前设定的标志相反，则直接返回false。
*/
