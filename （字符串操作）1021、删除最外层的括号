/*
有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。

如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。

给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。

对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。

 

示例 1：

输入："(()())(())"
输出："()()()"
解释：
输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，
删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。
示例 2：

输入："(()())(())(()(()))"
输出："()()()()(())"
解释：
输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，
删除每隔部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。
示例 3：

输入："()()"
输出：""
解释：
输入字符串为 "()()"，原语化分解得到 "()" + "()"，
删除每个部分中的最外层括号后得到 "" + "" = ""。
 

提示：

S.length <= 10000
S[i] 为 "(" 或 ")"
S 是一个有效括号字符串
*/

char * removeOuterParentheses(char * S)
{
    int cnt = 0;
    int index = 0;
    int len = strlen(S);
    char* stack = (char*)malloc((len + 1) * sizeof(char));
    
    for(int i = 0; i < len; i++)
    {
        if(S[i] == '(')
        {
            cnt++;
            if(cnt != 1)
                stack[index++] = S[i];
        }
        else if(S[i] == ')')
        {
            cnt--;
            if(cnt != 0)
                stack[index++] = S[i];
        }
    }
    stack[index] = '\0';
    return stack;
}

/*
这道题可以通过判断左括号“（”和右括号“）”的个数来确定需要输出的字符。
由于是删除最外层的括号，并且原字符串肯定都是有效的括号组合，
因此在遍历原字符串时，遇见左括号“（”则自增计数变量cnt，
如果cnt>1则说明在遍历的过程中已经遇到了最外层括号中的“（”，此时指向的“（”
不再是最外层括号，需要保存下来；
在遍历原字符串时，遇见右括号“）”则自减计数变量cnt，
如果cnt>0则说明在遍历过程中还没有遇到最外层括号中的“）”，此时指向的“）”
还不是最外层括号，需要保存下来；
遍历过程中始终重复上述过程，直到遍历结束。
最后在新的字符串后补上字符串结束字符，输出保存下来的字符组成的字符串即可。
*/
