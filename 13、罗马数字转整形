/*
罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。

字符          数值
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。

通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：

I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。

示例 1:

输入: "III"
输出: 3
示例 2:

输入: "IV"
输出: 4
示例 3:

输入: "IX"
输出: 9
示例 4:

输入: "LVIII"
输出: 58
解释: L = 50, V= 5, III = 3.
示例 5:

输入: "MCMXCIV"
输出: 1994
解释: M = 1000, CM = 900, XC = 90, IV = 4.
*/

int romanToInt(char* s) 
{
    int result = 0;
    int i=0;
    int n = strlen(s);
    int *arr;
    arr = (int*)malloc(sizeof(int)*n);

    while(i < n)
    {
        arr[i] = *s;
        if(arr[i]=='I')
            arr[i] = 1;
        if(arr[i]=='V')
            arr[i] = 5;
        if(arr[i]=='X')
            arr[i] = 10;
        if(arr[i]=='L')
            arr[i] = 50;
        if(arr[i]=='C')
            arr[i] = 100;
        if(arr[i]=='D')
            arr[i] = 500;
        if(arr[i]=='M')
            arr[i] = 1000;
        i++;
        s++;
    }

    if(n == 1)//单字符处理，直接赋值就好了
    {
        result = arr[0];
    }
    else
    {
        for(i = 0; i < n-1; i++)//注意数组边界
        {
            if(arr[i] < arr[i+1])
                result -= arr[i];
            if(arr[i] >= arr[i+1])
                result += arr[i];
        }
        result += arr[n-1];//最后一个数字肯定取正
    }
    return result;
}

/*
思想是首先定义动态数组（因为测试的罗马数字的长度未知）；
然后将测试字符串中的字符一一映射到这个动态数组中，并且将字符根据题目定义规则转换为对应的数字；
然后根据题目要求对映射数字进行计算：
题目中给定的规则可以转化为：左侧数字小于其紧邻的右侧数字的话，结果是左侧数字记作负值（即做减法），相反则做加法。
需要注意的是，动态数组不能定义为char型，因为char型的最大值是127，而其对应的映射数字可以达到500和1000，会溢出，
直接定义int型数组存储字符即可，这样直接存储ASCII码，对应数字映射时也可以直接赋值不会溢出。
另外需要注意的就是特殊情况处理和数组的边界问题。
*/
